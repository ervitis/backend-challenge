// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protopb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BasketClient is the client API for Basket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasketClient interface {
	Create(ctx context.Context, in *NewOrderByUser, opts ...grpc.CallOption) (*NewOrderCreated, error)
	Checkout(ctx context.Context, in *NewOrderCreated, opts ...grpc.CallOption) (*OperationConfirmed, error)
	AddToBasket(ctx context.Context, in *AddItemsToOrder, opts ...grpc.CallOption) (*OperationConfirmed, error)
	GetTotalAmount(ctx context.Context, in *NewOrderCreated, opts ...grpc.CallOption) (*Amount, error)
	RemoveAll(ctx context.Context, in *NewOrderCreated, opts ...grpc.CallOption) (*OperationConfirmed, error)
}

type basketClient struct {
	cc grpc.ClientConnInterface
}

func NewBasketClient(cc grpc.ClientConnInterface) BasketClient {
	return &basketClient{cc}
}

func (c *basketClient) Create(ctx context.Context, in *NewOrderByUser, opts ...grpc.CallOption) (*NewOrderCreated, error) {
	out := new(NewOrderCreated)
	err := c.cc.Invoke(ctx, "/basket.Basket/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketClient) Checkout(ctx context.Context, in *NewOrderCreated, opts ...grpc.CallOption) (*OperationConfirmed, error) {
	out := new(OperationConfirmed)
	err := c.cc.Invoke(ctx, "/basket.Basket/Checkout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketClient) AddToBasket(ctx context.Context, in *AddItemsToOrder, opts ...grpc.CallOption) (*OperationConfirmed, error) {
	out := new(OperationConfirmed)
	err := c.cc.Invoke(ctx, "/basket.Basket/AddToBasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketClient) GetTotalAmount(ctx context.Context, in *NewOrderCreated, opts ...grpc.CallOption) (*Amount, error) {
	out := new(Amount)
	err := c.cc.Invoke(ctx, "/basket.Basket/GetTotalAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketClient) RemoveAll(ctx context.Context, in *NewOrderCreated, opts ...grpc.CallOption) (*OperationConfirmed, error) {
	out := new(OperationConfirmed)
	err := c.cc.Invoke(ctx, "/basket.Basket/RemoveAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasketServer is the server API for Basket service.
// All implementations must embed UnimplementedBasketServer
// for forward compatibility
type BasketServer interface {
	Create(context.Context, *NewOrderByUser) (*NewOrderCreated, error)
	Checkout(context.Context, *NewOrderCreated) (*OperationConfirmed, error)
	AddToBasket(context.Context, *AddItemsToOrder) (*OperationConfirmed, error)
	GetTotalAmount(context.Context, *NewOrderCreated) (*Amount, error)
	RemoveAll(context.Context, *NewOrderCreated) (*OperationConfirmed, error)
	mustEmbedUnimplementedBasketServer()
}

// UnimplementedBasketServer must be embedded to have forward compatible implementations.
type UnimplementedBasketServer struct {
}

func (UnimplementedBasketServer) Create(context.Context, *NewOrderByUser) (*NewOrderCreated, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBasketServer) Checkout(context.Context, *NewOrderCreated) (*OperationConfirmed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checkout not implemented")
}
func (UnimplementedBasketServer) AddToBasket(context.Context, *AddItemsToOrder) (*OperationConfirmed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBasket not implemented")
}
func (UnimplementedBasketServer) GetTotalAmount(context.Context, *NewOrderCreated) (*Amount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalAmount not implemented")
}
func (UnimplementedBasketServer) RemoveAll(context.Context, *NewOrderCreated) (*OperationConfirmed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAll not implemented")
}
func (UnimplementedBasketServer) mustEmbedUnimplementedBasketServer() {}

// UnsafeBasketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasketServer will
// result in compilation errors.
type UnsafeBasketServer interface {
	mustEmbedUnimplementedBasketServer()
}

func RegisterBasketServer(s grpc.ServiceRegistrar, srv BasketServer) {
	s.RegisterService(&Basket_ServiceDesc, srv)
}

func _Basket_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOrderByUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basket.Basket/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServer).Create(ctx, req.(*NewOrderByUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basket_Checkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOrderCreated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServer).Checkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basket.Basket/Checkout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServer).Checkout(ctx, req.(*NewOrderCreated))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basket_AddToBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemsToOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServer).AddToBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basket.Basket/AddToBasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServer).AddToBasket(ctx, req.(*AddItemsToOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basket_GetTotalAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOrderCreated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServer).GetTotalAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basket.Basket/GetTotalAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServer).GetTotalAmount(ctx, req.(*NewOrderCreated))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basket_RemoveAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOrderCreated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServer).RemoveAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basket.Basket/RemoveAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServer).RemoveAll(ctx, req.(*NewOrderCreated))
	}
	return interceptor(ctx, in, info, handler)
}

// Basket_ServiceDesc is the grpc.ServiceDesc for Basket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Basket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "basket.Basket",
	HandlerType: (*BasketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Basket_Create_Handler,
		},
		{
			MethodName: "Checkout",
			Handler:    _Basket_Checkout_Handler,
		},
		{
			MethodName: "AddToBasket",
			Handler:    _Basket_AddToBasket_Handler,
		},
		{
			MethodName: "GetTotalAmount",
			Handler:    _Basket_GetTotalAmount_Handler,
		},
		{
			MethodName: "RemoveAll",
			Handler:    _Basket_RemoveAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "basket.proto",
}
